{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Statistics/Statistics.js","App.js","reportWebVitals.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","map","option","type","className","onClick","Notification","message","Statistics","good","neutral","bad","total","PositivePercentage","App","useState","setGood","setNeutral","setBad","countTotalFeedback","Math","round","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMAWeA,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCSQC,EAbS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OAAOD,EAAQE,KAAI,SAACC,GAAD,OACjB,wBACEC,KAAK,SACLC,UAAU,MAEVC,QAAS,kBAAML,EAAgBE,IAJjC,SAMGA,GAHIA,OCHII,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCkB3BC,EAjBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACGD,EAAQ,GACP,+BACE,wCAAWH,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,uDAA0BC,EAA1B,UAGO,IAAVD,GAAe,cAAC,EAAD,CAAcL,QAAQ,0BCT7B,SAASO,IAAO,IAAD,EACJC,mBAAS,GADL,mBACrBN,EADqB,KACfO,EADe,OAEED,mBAAS,GAFX,mBAErBL,EAFqB,KAEZO,EAFY,OAGNF,mBAAS,GAHH,mBAGrBJ,EAHqB,KAGhBO,EAHgB,KAyBtBC,EAAqB,kBAAMV,EAAOC,EAAUC,GAKlD,OACE,gCACE,cAAC,EAAD,CAASf,MAAM,wBAAf,SACE,cAAC,EAAD,CAAiBG,QA5BP,CAAC,OAAQ,UAAW,OA4BKC,gBA3BrB,SAACE,GACnB,OAAQA,GACN,IAAK,OACHc,EAAQP,EAAO,GACf,MAEF,IAAK,UACHQ,EAAWP,EAAU,GACrB,MAEF,IAAK,MACHQ,EAAOP,EAAM,GACb,MAEF,QACE,aAcF,cAAC,EAAD,CAASf,MAAM,aAAf,SACE,cAAC,EAAD,CACEa,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOO,IACPN,mBAbNO,KAAKC,MAAOZ,EAAOU,IAAwB,MAAQ,SClCvD,IAYeG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACnB,EAAD,MAEFoB,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.37fa9bee.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n","import PropTypes from \"prop-types\";\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return options.map((option) => (\n    <button\n      type=\"button\"\n      className=\"btn\"\n      key={option}\n      onClick={() => onLeaveFeedback(option)}\n    >\n      {option}\n    </button>\n  ));\n};\n\nexport default FeedbackOptions;\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string),\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => <p>{message}</p>;\n\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","// import PropTypes from 'prop-types'\nimport Notification from \"../Notification\";\n\nconst Statistics = ({ good, neutral, bad, total, PositivePercentage }) => {\n  return (\n    <>\n      {total > 0 && (\n        <ul>\n          <li>Good: {good}</li>\n          <li>Neutral: {neutral}</li>\n          <li>Bed: {bad}</li>\n          <li>Total: {total}</li>\n          <li>Positive Percentage: {PositivePercentage}%</li>\n        </ul>\n      )}\n      {total === 0 && <Notification message=\"No feedback given\" />}\n    </>\n  );\n};\n\nexport default Statistics;\n","import { useState } from \"react\";\n\nimport Section from \"./components/Section\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Statistics from \"./components/Statistics\";\n\nexport default function App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const options = [\"good\", \"neutral\", \"bad\"];\n  const addFeedback = (option) => {\n    switch (option) {\n      case \"good\":\n        setGood(good + 1);\n        break;\n\n      case \"neutral\":\n        setNeutral(neutral + 1);\n        break;\n\n      case \"bad\":\n        setBad(bad + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const countTotalFeedback = () => good + neutral + bad;\n\n  const countPositiveFeedbackPercentage = () =>\n    Math.round((good / countTotalFeedback()) * 100) || 0;\n\n  return (\n    <div>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions options={options} onLeaveFeedback={addFeedback} />\n      </Section>\n      <Section title=\"Statistics\">\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={countTotalFeedback()}\n          PositivePercentage={countPositiveFeedbackPercentage()}\n        ></Statistics>\n      </Section>\n    </div>\n  );\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}